Spring is a framework focused on the inversion of control principle. To achieve this it uses the dependency Injection pattern.
Because of this, it makes it easy to develop loosely coupled applications. It makes applications testable.

2.- listame caracteristicas de spring
	a) contenedor
	b) framework-mvc
	c) inversion de control
		c.1) que es la inyeccion de dependencias?
		c.2) Liste algunos tipos de inyeccion de dependencias.
	d) transacciones
		d.1) en que capa se manejan las transacciones?
	e) programacion orientada a aspectos
	f) manejo de excepciones jdbc
		

Spring Core
	Inversion of control 
        Application Context 
        Beans 

Spring MVC
	Models
	Annotations
	CRUD REST API
	CDRS
	Data Validation

Spring Data
	- JDBC
	- ...

Spring Boot
	Spring based applications have a lot of configuration. When we use Spring MVC, we need to configure component scan, dispatcher servlet, a view resolver, web jars(for delivering static content) among other things. 	        When we use Hibernate/JPA, we would need to configure a datasource, an entity manager factory, a transaction manager among a host of other things. 
	Spring Boot can auto configure some beans automatically
	
	Spring boot provides:
	Starters - convenient dependencies that package everything we need for certain scenarios
	Auto config
	Production ready - Actuator dependency provides production ready features: Endpoints for health check, beans, etc
	                                                                           Observability - Logging, metrics, tracing

Spring MVC 
	Provides a decoupled way of developing web applications, separating the model, the view and the controller(a.k.a dispatcher servlet)


Annotation questions:
	- Q: Let's say I have a class that I don't own because its in an external library, how do I inject an instance of that class into the ApplicationContext?
	  A: We create a class with the @Configuration annotation. Inside that class, we create a method that returns an instance of the class we want to inject, and we mark the method
             with the @Bean annotation. @Bean indicates that a method produces a bean that will be managed by the Spring Container. The name of the bean wil be the method name

	- Q: What does @Controller and @RestController do?
	  A: @Controller is used to create web controllers that return views, which is further resolved by view resolver, while @RestController is used to create web services that return JSON or XML data

	- Q: What does @RequestMapping do?
	  A: It tells Spring whats the path to arrive to the current controller.

	- Q: What does @GetMapping do?
	  A: Its a method annotation that tells spring to call the current method for GET requests for a certain path.

	- Q: What does @Repository do?
	  A: It tells Spring that the class provides a mechanism for storage, retrieval, search, update and delete operation on objects.

	- Q: What does @Autowired do?
	  A: It tells Spring to assign a variable with an instance that is living in the application context.

	- Q: What does @PostConstruct do?
	  A: It tells spring that the current method has to be called after dependency injection is done. Usually used for initialization.
