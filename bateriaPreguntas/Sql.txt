SQL(Structured Query Language) 
- Table Based structure, which has some pros:
  > Its useful for organizing and structuring a lot of different data. 
  > Allow easy querying on relationships among related data across multiple tables
  > Since data is structured the potential for error is reduced, because you know how to format the data before storing/retrieving.
  > ACID Compliant: Transactions are atomic (Either all or no instructions complete), consistent
- It also has weaknesses:
  > Structured data might mean fewer errors but also means that the structure must be created in advance. More setup time.
  > Dificult to scale horizontally because of the relational nature. 
    For read heavy system its easy to provide horizontal replicas. But for write heavy systems, usually the only option
    is to scale vertically.
- Vertical Scaling (Increase size of instance, RAM, CPU)

NoSQL
- Document key-value pairs: Good for storing unstructured data
- Horizontal Scaling (Add more instances)
- It has some pros:
  > Flexible, easy to setup since they dont support table relationships
  > Because they are good for unstructured data, they can also shard this data acrros different stores,
    allowing for distributed databases, allowing easy horizontal scaling
- It has some weaknessses:
  > Loss of consistency. NoSQL databases are tipically designed for distributed use cases and write heavy systems
    can be supported by having multiple shards for the same data partition (called peer-to-peer replication), 
    however the trade off is loss of strong consistency, because after the write to a shard in a distributed nosql
    cluster, there is a small delay before that update can be propagated to the replicas, so during this time, 
    reading from a replica can result in getting stale data. This weakness of the data eventually being up to date
    is called eventual consistency. 
    Eventual consistency isnt exactly a fault of nosql DBs, but distributed DBs in general.
    A single shard nosql database can be strongly consistent, but to fully take advantage of the scalability benefits
    of nosql, the database should really be setup as a distributed cluster.
    

- Optimistic Locking vs Perssimistic Locking
 https://stackoverflow.com/questions/129329/optimistic-vs-pessimistic-locking

- Database sharding and partitioning (https://www.linkedin.com/advice/1/how-do-you-balance-load-distribute-data-across-multiple)

Database sharding is the process of splitting a large database into smaller, independent, and distributed units called shards. Each shard contains a subset of the data, and can be located on a different server or cluster. Sharding reduces the load on each database server, and allows for parallel processing and querying of the data. However, sharding also introduces some challenges, such as data consistency, availability, and security.

Database partitioning is the process of dividing a large table or collection into smaller, more manageable units called partitions. Each partition contains a subset of the rows or documents, and can be stored on the same or different server. Partitioning improves the performance and efficiency of queries, by reducing the amount of data that needs to be scanned or indexed. However, partitioning also requires careful planning and design, as it affects the schema, indexing, and querying of the data.

- ACID: 4 key properties that define a transaction: Atomicity, Consistency, Isolation, and Durability. 
ACID transactions guarantee that each read, write, or modification of a table has the following properties:
Atomicity - ensures that either all the CRUD Statements inside a transaction are completed successfully or all of them are rolled back.
Consistency - ensures that the database data is in a consistent state before the transaction started and also left the data in a consistent state after the transaction is completed.
Isolation - ensures that the intermediate state of a transaction is invisible to other transactions. The Data modifications made by one transaction must be isolated from the data modifications made by all other transactions. Most databases use locking to maintain transaction isolation.
Durability - ensures that once the transaction is successfully completed, then the changes it made to the database will be permanent.

- Database indexing TODO


Teorema de CAP bien expplicado https://eamodeorubio.wordpress.com/2010/05/17/nosql-2-no-necesitas-acid/


