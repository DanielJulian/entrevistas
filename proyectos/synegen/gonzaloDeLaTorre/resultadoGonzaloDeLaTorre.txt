1. un poco de tu experiencia pasada?
	- Aplicacion en back end en grails.

2. cual fue el problema mas complicado que tuviste que resolver en temas de programacion?
	- Lenguaje para evaluacion gramatical, arboles.
	- hizo un compilador para la facultad (a lenguaje maquina).

3. Que rasgos destacas de tu personalidad?
	- Orientado a resolver problemas, le gusta estar solo para pensar y ver como resolverlo. 

4. Cual es tu mayor defecto?
	- Interactuar mas con las demas personas. no le gustan las charlas repetitivas negativas, como por ejemplo el dolar

5. trabajaste en ambientes con diversidad cultural
	-   me olvide de preguntar :'(

a) Herramientas
	
1. maven
	Conoces maven? como funciona y para que sirve?
		- ok
	Como resuelvo un problema de dependencias con maven?
		- no.
	Cuales son los scope de las dependencias de maven?
		- no.

2. git
	2.1 Que es un branch?
	2.2 Estas en rama master, creas un branch llamado 'branch1', efectuas cambios en el,como son los pasos para que tus cambios se reflejen en master.
		- ok.
	2.3 Como cambio un typo en un mensaje ya commiteado.
		- no.
	3.4 Cherry picking.
		- no.
	3.5 Que es un pull request?
		- ok.

3. Servidor de colas externos, activemq.
	-no.

4. Bamboo
	*para que sirve.
		- no.

5. Jira 
	* conta un poco de tu expreiencia con jira
		- ticket. -ok

6. jenkins
	- no.

7. cucumer
	- no.

8. Gradle - no.
	* Que es y para que sirve?
	* Ventajas y desventajas con respecto a maven
	* Que es una task en gradle y que ventajas me da.
	* como se manejan las dependencias de las taks y como puedo hacer que una dependa de otra.

9. Webservices
	*REST
		-vervos -ok
			-stateless -no.
		
	*SOAP wsdl 
		- ok.

b) Java

1. diferencia entre jdk y jre
	* Herramientas para debugear la jdk, jconsole, new relic.
	* como funciona el garbage collector. tipos de garbage collector.
	
2.Cuales son los conceptos de POO?
	*Encapsulamiento
		- ok.
	*Polymorphism
		- ok.
	*Inheritance
		- ok.


2.a polimorfismo
	- ok.

2.b clase abstracta/interfaz
	b1. como instancio una clase abstracta. 
		- ok.
	b2. ¿Cuántas clases puede extender una clase abstracta?  
		- ok.
	 ¿Cuántas interfaces? 
	 	- ok.
	
2.c encapsulamiento, definir.
	private
		- ok.
	public
		- ok.
	protected
		- ok.
	default
		- ok.

3. estructuras de datos
	*nombrar. 
		- Link
		- Map
		- Set
		- arboles
		- stack
		- Queue
	*diferencia LinkedList/arrayList 
		- no.
	*set. porque el set no asegura el orden? 
		- ok.

3a. map
	a1. equals y hashcode
		- no.
	a2. como implementar un hashcode y un equals.
		- no.

4. Final
	* variable.
		- ok.
	* método. 
		- ok.
	* Clase. 
		- ok.

		Persona p = new Persona(); - no.

4a. transient
	- no.

4b. volatile
	- no.

5. Constructores
	* ¿Se puede sobrecargar un constructor? 
		- ok. 
	* ¿Se puede sobreescribir un constructor?
		- ok.

6 Exceptions
usamos bastante las runtime exceptions.
	* checked
		- ok.
	* unchecked
		- ok.
	* ¿El bloqué finally se ejecuta siempre?
		- no.
	* ¿Se ejecuta siempre completo?
		- ok.

7 Generics
	* ventajas
		-  ok.
	* Como implementar una clase con generics.
		- ok.

8 reflexion
	* para que sirve?
		- no.
	* ventajas y desventajas
		- no.

9 Threads
	9.a diferentes formas de crear threads, cual te gusta mas y porque?
		- extends thread
			- no.
		- implement runnable
			- no.
		- use Executors
			- no.
	9.b que es un deadlock?
		-no.
	9.c synchronized
		-no.
	
	lambda -filter - no.
	       -map - no.

10. logging
	10a. info,debug,error,fatal.
	10b. Como manejarias el logging para 20 aplicaciones en paralelo. (elk, logstash, elastic search, kivana).

11. Patrones de diseño
	10.1 que patrones de disenio conoces.
		*  Visitor. - no.
		*  Mvc.
		*  Strategy.
		*  Singleton.

	10.2 Como se implementa singleton.
		- constructor privado - ok.
		- metodo misma instancia - ok.

	10.3 como se implementa factory/builder
		- no


14. Junit/mockito/tdd
	9.1 herramientas de stress test. jmetter
	9.2 como probas tu codigo.
		- ok.
	9.3 defini a grandes rasgos como funciona junit.
	9.4 como usarias mockito para mockear un metodo.
		- spok.
	9.5 TDD
		- no
QuÃ© es la consola de desarrollo?
	- 
QuÃ© significa que Javascript sea Dynamic Typed?
	- no.
CuÃ¡l es la diferencia entre == y ===?
	- ok.
QuÃ© es una promesa en Javascript?
	- no.
QuÃ© es un callback?
	- no.
Que es un callbackHell y como lo solucionarias?
	- no.



Angular js - no.

como crear un proyecto en angular?
como levantar un proyecto en agular? (instalar dependencias)
como inyectar un servicio en angular? (creacion e inyectacion)
que es y para que sirve el app.module.ts?
supongamos que creo un component, como lo declaro donde? de que forma lo creo?
cual es la diferencia entre las declarations, imports y providers ?
ngIf -> donde se usa como y para que?
variable binding

1.- que es srping?
	- 
2.- listame caracteristicas de spring
	a) contenedor
	b) framework-mvc
	c) inversion de control
		c.1) que es la inyeccion de dependencias?
		c.2) Liste algunos tipos de inyeccion de dependencias.
	d) transacciones
		d.1) en que capa se manejan las transacciones?
	e) programacion orientada a aspectos
	f) manejo de excepciones jdbc
		

1. Cual es el usuario administrador por defecto en unix?
	-
2. Como renombro un archivo en unix?
	- no.
3. Estoy parado en una carpeta con 10 archivos, quiero buscar la palabra error en esos 10 archivos.
	-
4. Quiero copiar la carpeta logs al directorio inferior al que estoy que comando usaria?
	-
5. Que hace y como funciona el comando ssh.
	- no.
6. Que hace y como funciona el comando scp.
	- no.
7. Tengo una apllicacion logeando en el archivo log.txt, como hago para ver que escribe la aplicacion en ese file en tiempo real?
	-
8. Que utilizarias para modificar un archivo desde la consola?
	-

Oracle, sqlServer, MySql.

Uuna empresa quiere liquidar sueldos, para eso utiliza sus dos tablas "empleado" y "salario".
 La tabla "empleado" contiene: legajo, nombre, apellido y sexo.
 La tabla "salario" contiene: legajo, salario.
 Se quiere saber quienes ganan mas de 50.000.

  select empleado.nombre from empleado inner join salario on empleado.legajo = salario.legajo where salario.salario > 50.000

-ok
