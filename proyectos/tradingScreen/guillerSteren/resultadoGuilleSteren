Web development with JavaScript and/or Java Swing development
	-ok.
		-jquery.
Distributed caching (plus)
	-no.

1. un poco de tu experiencia pasada?
	-Java web, spring-mvc y gwt. swing front end para main coder.
	-Desde 2012 desarrollando un programa llamado PAD , para agentes de call center, manejo multimedia.

2. cual fue el problema mas complicado que tuviste que resolver en temas de programacion?
	-Disenio desde cero de una aplicacion , interesado en el manejo de eventos y en la arquitectura.
	-Programa expansible por plugin y que se puedan pisar las funcionalidades por los que hagan los plugin para hacerlo generico para otros clientes.

3. Que rasgos destacas de tu personalidad?
	-Me gusta hacer las cosas bien. Quiere estar orgulloso de lo que hago, no le gusta que le pongan tiempo muy limitados.

4. Cual es tu mayor defecto?
	-No le gusta desactualizarse con tecnologias.

5. trabajaste en ambientes con diversidad cultural
	-Si.
a) Herramientas
1. maven
	Conoces maven? como funciona y para que sirve?
		-ok.
	Como resuelvo un problema de dependencias con maven?
		-ok.
	Cuales son los scope de las dependencias de maven?
		-ok.

2. git  - no
	2.1 Que es un branch?
	2.2 Estas en rama master, creas un branch llamado 'branch1', efectuas cambios en el,como son los pasos para que tus cambios se reflejen en master.
	2.3 Como cambio un typo en un mensaje ya commiteado.
	3.4 Cherry picking.
	3.5 Que es un pull request?
	3.6 Diferencia entre fork, branch, clone.

3. Servidor de colas externos, activemq.
	-no.
	-kafka - no.

4. Bamboo
	*para que sirve.
		-no.
5. Jira 
	* conta un poco de tu expreiencia con jira
		-no. trabajo con tickets pero con otra plataforma.
6. jenkins
	-no.

7. cucumer
	-no.

8. Gradle  - no.
	* Que es y para que sirve?
	* Ventajas y desventajas con respecto a maven
	* Que es una task en gradle y que ventajas me da.
	* como se manejan las dependencias de las taks y como puedo hacer que una dependa de otra.

9. Webservices
	*REST
		-ok.
			-get, post.
			-stateless - ok.

	*SOAP wsdl 
		-ok.
	
b) Java

1. diferencia entre jdk y jre
	* Herramientas para debugear la jdk, jconsole, new relic.
	* como funciona el garbage collector. tipos de garbage collector.
	
2.Cuales son los conceptos de POO?
	*Encapsulamiento
		-no.
	*Polymorphism
		-ok.
	*Inheritance
		-ok.

2.a polimorfismo
	-maso.

2.b clase abstracta/interfaz
	b1. como instancio una clase abstracta. 
		-ok.
	b2. ¿Cuántas clases puede extender una clase abstracta?  
		-ok.
	 ¿Cuántas interfaces? 
	 	-ok.
	
2.c encapsulamiento, definir.
	private
		-ok.
	public
		-ok.
	protected
		-ok.
	default
		-ok.

2.d clase/objeto/instancia

3. estructuras de datos
	*nombrar. 
		-Lista
		-ArrayList o linkedlist para insersiones. no.
		-Map
		-Set
			-no repetidos. -ok.
			-no garantiza el orden. -ok.
		-stack

	*diferencia LinkedList/arrayList 
		-no.
	*set. porque el set no asegura el orden? 
		-no pregunte.

3a. map
	a1. equals y hashcode
		-maso.
	a2. como implementar un hashcode y un equals.
		-ok.

4. Final
	* variable.
		-ok.
			-valides del setNombre. -ok.
	* método. 
		-ok.
	* Clase. 
		-ok.

4a. transient
	-ok.

4b. volatile
	-ok.

5. Constructores
	* ¿Se puede sobrecargar un constructor? 
		-no.
	* ¿Se puede sobreescribir un constructor?
		-ok.

6 Exceptions
usamos bastante las runtime exceptions.
	* checked
		-ok.
	* unchecked
		-ok.
	* ¿El bloqué finally se ejecuta siempre?
		-ok.
	* ¿Se ejecuta siempre completo?

7 Generics
	* ventajas
		-ok.
	* Como implementar una clase con generics.
		-ok.

8 reflexion
	* para que sirve?
		-ok.
	* ventajas y desventajas
		-ok.

9 Threads
	9.a diferentes formas de crear threads, cual te gusta mas y porque?
		-extends thread
			-ok.
		-implement runnable
			-ok.
		-use Executors
			-ok.
	9.b que es un deadlock?
		-ok.
	9.c synchronized
		-ok.
	9.e  start().
		-no.

10. logging
	10a. Info,debug,error,fatal.
		-ok.
	10b. Como manejarias el logging para 20 aplicaciones en paralelo. (elk, logstash, elastic search, kivana).
		-no.

11. Patrones de diseño
	10.1 que patrones de disenio conoces.
		*Singleton
			-ok.
		*visitor
			-ok.
		*composite
			-ok.

	10.2 Como se implementa singleton.
		-ok.
	10.3 como se implementa factory/builder
		-no pregunte.


14. Junit/mockito/tdd
	9.1 herramientas de stress test. jmetter
	9.2 como probas tu codigo.
		-junit.
	9.3 defini a grandes rasgos como funciona junit.
	9.4 como usarias mockito para mockear un metodo.
		- uso mockito hace mucho.
	9.5 TDD
		-ok.
1.- que es srping?
	- ok.
2.- listame caracteristicas de spring
	a) contenedor
		-
	b) framework-mvc
		-ok.
	c) inversion de control
		c.1) que es la inyeccion de dependencias?
			-ok.
		c.2) Liste algunos tipos de inyeccion de dependencias.
			-ok.
	d) transacciones
		d.1) en que capa se manejan las transacciones?
			-ok.
	e) programacion orientada a aspectos
		-ok.
	f) manejo de excepciones jdbc
		-ok.
1. Cual es el usuario administrador por defecto en unix?
	-ok.
2. Como renombro un archivo en unix?
	-ok.
3. Estoy parado en una carpeta con 10 archivos, quiero buscar la palabra error en esos 10 archivos.
	-grep  error *
4. Quiero copiar la carpeta logs al directorio inferior al que estoy que comando usaria?
	-
5. Que hace y como funciona el comando ssh.
	-ok.
6. Que hace y como funciona el comando scp.
	-ok.
7. Tengo una apllicacion logeando en el archivo log.txt, como hago para ver que escribe la aplicacion en ese file en tiempo real?
8. Que utilizarias para modificar un archivo desde la consola?

Uuna empresa quiere liquidar sueldos, para eso utiliza sus dos tablas "empleado" y "salario".
 La tabla "empleado" contiene: legajo, nombre, apellido y sexo.
 La tabla "salario" contiene: legajo, salario.
 Se quiere saber quienes ganan mas de 50.000.

  select empleado.nombre from empleado inner join salario on empleado.legajo = salario.legajo where salario.salario > 50.000
  	-ok.

  Se quiere saber cuanto ganan las mujeres en total.
  B) select SUM(salario.salario) from empleado inner join salario on empleado.legajo = salario.legajo where empleado.sexo = 'mujer' group by empleado.sexo

  Se desea saber las distintas familias (apellido) que trabajan en la empresa, sin repetir.
  A) select distinct apellido from empleado;
