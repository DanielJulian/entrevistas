1. un poco de tu experiencia pasada?
	-era para impuestos de estados unidos y esas weas.
	-trabajo en american airlines. para los operadores telefonicos.

2. cual fue el problema mas complicado que tuviste que resolver en temas de programacion?
	- en neveris, trabajando para movistar, aplicaciones de escritorio de uso interno pasarlas a web.
	- backend en hibernate, el hizo el front end , jquery bootstrap.

3. Que rasgos destacas de tu personalidad?
	-Perseverancia, trata de enfocarse para conseguir el objetivo.

4. Cual es tu mayor defecto?
	-inseguridad para hacer ciertas cosas, siempre pensar que otro es mejor.

5. trabajaste en ambientes con diversidad cultural
	-si.
a) Herramientas
1. maven
	- Conoces maven? como funciona y para que sirve?
		-ok.
	- Como resuelvo un problema de dependencias con maven?
		-ok.
	- Cuales son los scope de las dependencias de maven?
		-no. 

2. git 
	2.1 Que es un branch?
	2.2 Estas en rama master, creas un branch llamado 'branch1', efectuas cambios en el,como son los pasos para que tus cambios se reflejen en master.
		-maso.
	2.3 Como cambio un typo en un mensaje ya commiteado.
		-no.
	3.4 Cherry picking.
		-maso.
	3.5 Que es un pull request?
		-ok.

3. Servidor de colas externos, activemq.
	-no.

4. Bamboo
	*para que sirve.
		-no.
5. Jira 
	* conta un poco de tu expreiencia con jira
		-ok.
6. jenkins
	-no.

7. cucumer
	-no.

8. Gradle - ok. nunca lo uso.
	* Que es y para que sirve?
	* Ventajas y desventajas con respecto a maven
	* Que es una task en gradle y que ventajas me da.
	* como se manejan las dependencias de las taks y como puedo hacer que una dependa de otra.

9. Webservices
	*REST
		-ok.
		-stateless - no.

	*SOAP wsdl 
		-no.
	
b) Java

1. diferencia entre jdk y jre
	* Herramientas para debugear la jdk, jconsole, new relic.
	* como funciona el garbage collector. tipos de garbage collector.
	
2.Cuales son los conceptos de POO?
	*Encapsulamiento
		-ok.
	*Polymorphism
		-ok.
	*Inheritance
		-ok.


2.a polimorfismo
	-maso.

2.b clase abstracta/interfaz
	b1. como instancio una clase abstracta. 
		-ok.
	b2. ¿Cuántas clases puede extender una clase abstracta?  
		-maso.
	 ¿Cuántas interfaces? 
	 	-ok.
	
2.c encapsulamiento, definir.
	private
		-ok.
	public
		-ok.
	protected
		-maso.
	default
		-maso.

2.d clase/objeto/instancia

3. estructuras de datos
	*nombrar. 
		-map
		-listas
		-set
			-no repetidos. ok.
			-no asegura el orden. -no

	*diferencia LinkedList/arrayList 
		-no.
	*set. porque el set no asegura el orden? 
		-no.

3a. map
	a1. equals y hashcode
		-no.
	a2. como implementar un hashcode y un equals.
		hashcode -no.
		equals -ok.

4. Final
	* variable.
		-no.
	* método. 
		-no.
	* Clase. 
		-ok.

4a. transient
	-no.

4b. volatile
	-no.

5. Constructores
	* ¿Se puede sobrecargar un constructor? 
		-ok.
	* ¿Se puede sobreescribir un constructor?
		-ok.

6 Exceptions
usamos bastante las runtime exceptions.
	* checked
		-ok
	* unchecked
		-ok.
	* ¿El bloqué finally se ejecuta siempre?
		-ok.
	* ¿Se ejecuta siempre completo?
		-ok.

7 Generics
	* ventajas
		-no.
	* Como implementar una clase con generics.
		-no.

8 reflexion
	* para que sirve?
		-no.
	* ventajas y desventajas
		-no
		confundio reflexion con generics, pero igual lo dijo mal.
9. Swing - ok
	-gridBaGLayout.

10. Threads
	9.a diferentes formas de crear threads, cual te gusta mas y porque?
		-extends thread
			-no.
		-implement runnable
			-no.
		-use Executors
			-ok.
	9.b que es un deadlock?
		-no.
	9.c synchronized
		-no.
	9.d diferencia entre sleep y wait.
		-no.
	9.c Callables and futures.
		-maso.

11. logging
	10a. info,debug,error,fatal.
	10b. Como manejarias el logging para 20 aplicaciones en paralelo. (elk, logstash, elastic search, kivana).

12. Patrones de diseño
	12.1 que patrones de disenio conoces.
		* Adapter
			-ok.
		* facade
			-no pregunte.
		* Singleton
			-ok.
		* Oberver
			-no pregunte

	12.2 Como se implementa singleton.
		-no.
	12.3 como se implementa factory/builder

15. Junit/mockito/tdd
	15.1 herramientas de stress test. jmetter
		-
	15.2 como probas tu codigo.
		-junit, mockito.
	15.3 defini a grandes rasgos como funciona junit.
		-ok.
	15.4 como usarias mockito para mockear un metodo.
		-no.
	15.5 TDD
		-no.

1.- que es srping?
	-spring-mvc
	-spring-boot
	-spring-security - si pero no.
	
2.- listame caracteristicas de spring
	a) contenedor
		-aop
	b) framework-mvc
		-no.
	c) inversion de control
		c.1) que es la inyeccion de dependencias?
			-ok.
	d) transacciones
		d.1) en que capa se manejan las transacciones?
			-no.
	e) programacion orientada a aspectos
		-no.
	f) manejo de excepciones jdbc
		-no.
		

Uuna empresa quiere liquidar sueldos, para eso utiliza sus dos tablas "empleado" y "salario".
 La tabla "empleado" contiene: legajo, nombre, apellido y sexo.
 La tabla "salario" contiene: legajo, salario.
 Se quiere saber quienes ganan mas de 50.000.

  select empleado.nombre from empleado inner join salario on empleado.legajo = salario.legajo where salario.salario > 50.000

