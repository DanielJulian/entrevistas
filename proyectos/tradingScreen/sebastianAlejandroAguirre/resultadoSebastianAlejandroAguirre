1. un poco de tu experiencia pasada?
	- experiencia en trading.
	- entorno grafico basico , flex y swing.
	- angular,react.
	- java hasta java.6? omg.
	- hibernate oracle, mysql, nodesql, mongo, cassandra.
	- dificultad para comnunicarse.

2. cual fue el problema mas complicado que tuviste que resolver en temas de programacion?
	- RedHat, recibia casos de los problemas de las empresas , uno era problemas de memoria. Le empezaron a pasar esos problemas. y se adapto y le gusto

3. Que rasgos destacas de tu personalidad?
	- Buena capacidad para buscar soluciones a los problemas que se van presentando, a travez de la investingacion.

4. Cual es tu mayor defecto?
	-De pocas palabras.

5. trabajaste en ambientes con diversidad cultural
	-Si.
a) Herramientas
1. maven
	Conoces maven? como funciona y para que sirve?
		- ok.
	Como resuelvo un problema de dependencias con maven?
		- Exclusion. 
	Cuales son los scope de las dependencias de maven?
		-  no.

2. git  -  no. -  sabe SVN
	2.1 Estas en rama master, creas un branch llamado 'branch1', efectuas cambios en el,como son los pasos para que tus cambios se reflejen en master.
		-  push.
	2.2 Como cambio un typo en un mensaje ya commiteado.
		- no.
	3.3 Cherry picking.
		- no.
	3.4 Que es un pull request?
		- no.

3. Servidor de colas externos, activemq.
	- activeMQ.
	- weblogic Queue server. 

4. Bamboo
	*para que sirve.
		-no.
5. Jira 
	* conta un poco de tu expreiencia con jira
		-ok. para ver sprints. ok.
6. jenkins
	-ok.
	-jenkins file. no.

7. cucumer
	-no.

8. Gradle  -no.
		
9. Webservices - ok
	*REST
		-ok.
			stateless - no	
	*SOAP wsdl 
		-ok.
	
b) Java

1. diferencia entre jdk y jre
	* Herramientas para debugear la jdk, jconsole, new relic.
	* como funciona el garbage collector. tipos de garbage collector.
	
2.Cuales son los conceptos de POO?
	*Encapsulamiento
		-ok.
	*Polymorphism
		-ok.
	*Inheritance
		-ok.


2.a polimorfismo
	-ok.

2.b clase abstracta/interfaz
	b1. como instancio una clase abstracta. 
		-ok. maso.
	b2. ¿Cuántas clases puede extender una clase abstracta?  
		-ok.
	 ¿Cuántas interfaces? 
	 	-ok.
	
2.c encapsulamiento, definir.
	private
		-ok.
	public
		-ok.
	protected
		-ok.
	default
		-ok.

3. estructuras de datos
	*nombrar. 
		-list
		-set
		-hash
	*diferencia LinkedList/arrayList 
		-no.
	*set. porque el set no asegura el orden? 
		-elementos no repetidos -ok.
		-no asegura el orden - no.

3a. map
	a1. equals y hashcode
		-ok.
		objetos distintos puede dar igual - ok.
	a2. como implementar un hashcode y un equals.
		-equals -ok.
		-hashcode -maso.

4. Final
	* variable.
		-ok.
			-cambiar valor - no.
	* método. 
		-ok.
	* Clase. 
		-ok.

4a. transient
	-ok.

4b. volatile
	-ok.

5. Constructores
	* ¿Se puede sobrecargar un constructor? 
		-ok.
	* ¿Se puede sobreescribir un constructor?
		-ok. maso.

6 Exceptions
usamos bastante las runtime exceptions.
	* checked
		-ok.
			-ioException. -ok.
	* unchecked
		-ok.
			-ejemplo. ok.
	* ¿El bloqué finally se ejecuta siempre?
		-ok.
	* ¿Se ejecuta siempre completo?

7 Generics
	* ventajas
		-ok.
	* Como implementar una clase con generics.
		-maso.

8 reflexion
	* para que sirve?
		-no.
	* ventajas y desventajas
		-no.

9 Threads
	9.a diferentes formas de crear threads, cual te gusta mas y porque?
		-extends thread
			-ok.
		-implement runnable
			-ok.
		-use Executors
			-ok.
	crear un threads con funciones anonimas.
		-no
	9.b que es un deadlock?
		-no.
	9.c synchronized
		-ok.
	9.d start()
		-ok.
	9.e diferencia entre sleep y wait.
		-no.
	9.f Callables and futures.
		-no.

10. Swing
	-maso.

12. Patrones de diseño
	12.1 que patrones de disenio conoces.
		*singleton
		*factory
			-maso.
		*observer
		*proxy
			-maso.

	12.2 Como se implementa singleton.
		- constructor privado -ok.
		- metodo que devuelve instancia - ok.

	12.3 como se implementa factory/builder
		-factory -ok
		-builder -no.

15. Junit/mockito/tdd
	15.1 herramientas de stress test. jmetter
	15.2 como probas tu codigo.
		-junit
	15.3 defini a grandes rasgos como funciona junit.
	15.4 como usarias mockito para mockear un metodo.
		-mockito y powermock.
		-como mockear. -ok.
	15.5 TDD
		-ok.
1.- que es srping?
	-spring-mvc
	-spring-baseDeDatos (?)
	-spring-boot -maso.
		-diferencias - maso.
			
2.- listame caracteristicas de spring
	a) contenedor
		-
	b) framework-mvc
		-
	c) inversion de control
		c.1) que es la inyeccion de dependencias?
			-maso.
		c.2) Liste algunos tipos de inyeccion de dependencias.
			-no pregunte.
	d) transacciones
		d.1) en que capa se manejan las transacciones?
			-no.
	e) programacion orientada a aspectos
		-no.
	f) manejo de excepciones jdbc
		-no.
		
Una empresa quiere liquidar sueldos, para eso utiliza sus dos tablas "empleado" y "salario".
 La tabla "empleado" contiene: legajo, nombre, apellido y sexo.
 La tabla "salario" contiene: legajo, salario.
 Se quiere saber quienes ganan mas de 50.000. no.

